const BUILT_IN_SERVICES = [
	'Players',
	'ReplicatedStorage',
	'ServerScriptService',
	'StarterPlayer',
	'Lighting',
	'CollectionService',
	'PathfindingService',
	'RunService'
];

export const DEFAULT_STUBBED_SERVICES = BUILT_IN_SERVICES;

export function buildPrelude(stubbedServices: readonly string[]): string {
	const unique = Array.from(new Set([...BUILT_IN_SERVICES, ...stubbedServices]));
	const luaList = unique.map((name) => `\t\t"${name}"`).join(',\n');

	return `-- Roblox headless runtime prelude generated by RS-Code-Simulator\n`
		+ 'local __stubbedNames = {\n'
		+ luaList
		+ '\n}\n\n'
		+ `local function __noop(...) end\n`
		+ `local function __makeSignal()\n`
		+ `\tlocal signal = {}\n`
		+ `\tfunction signal:Connect(fn)\n`
		+ `\t\treturn { Disconnect = function() end }\n`
		+ `\tend\n`
		+ `\tfunction signal:Fire(...)\n`
		+ `\t\treturn ...\n`
		+ `\tend\n`
		+ `\treturn signal\n`
		+ `end\n\n`
		+ `local __services = {}\n`
		+ `local function __makeService(name)\n`
		+ `\tlocal service = { Name = name }\n`
		+ `\tservice.Events = setmetatable({}, {\n`
		+ `\t\t__index = function()\n`
		+ `\t\t\treturn {\n`
		+ `\t\t\t\tConnect = function(_, fn)\n`
		+ `\t\t\t\t\tif fn then fn({}) end\n`
		+ `\t\t\t\t\treturn { Disconnect = function() end }\n`
		+ `\t\t\t\tend,\n`
		+ `\t\t\t\tFire = __noop\n`
		+ `\t\t\t}\n`
		+ `\t\t\tend\n`
		+ `\t})\n`
		+ `\tservice.BindableEvent = function()\n`
		+ `\t\treturn {\n`
		+ `\t\t\tFire = __noop,\n`
		+ `\t\t\tEvent = {\n`
		+ `\t\t\t\tConnect = function(_, fn)\n`
		+ `\t\t\t\t\tif fn then fn({}) end\n`
		+ `\t\t\t\t\treturn { Disconnect = function() end }\n`
		+ `\t\t\t\tend\n`
		+ `\t\t\t}\n`
		+ `\t\t}\n`
		+ `\tend\n`
		+ `\treturn setmetatable(service, {\n`
		+ `\t\t__index = function()\n`
		+ `\t\t\treturn __noop\n`
		+ `\t\tend\n`
		+ `\t})\n`
		+ `end\n\n`
		+ `for _, name in ipairs(__stubbedNames) do\n`
		+ `\t__services[name] = __makeService(name)\n`
		+ `end\n\n`
		+ `game = game or {}\n`
		+ `function game:GetService(name)\n`
		+ `\tlocal existing = __services[name]\n`
		+ `\tif not existing then\n`
		+ `\t\texisting = __makeService(name)\n`
		+ `\t\t__services[name] = existing\n`
		+ `\tend\n`
		+ `\treturn existing\n`
		+ `end\n\n`
		+ `workspace = workspace or {}\n`
		+ `script = script or {}\n`
		+ `task = task or {\n`
		+ `\twait = function(seconds) return seconds or 0 end,\n`
		+ `\tdelay = function(_, fn) if fn then fn() end end,\n`
		+ `\tspawn = function(fn) if fn then fn() end end,\n`
		+ `\tdefer = function(fn) if fn then fn() end end\n`
		+ `}\n\n`
		+ `local runService = __services["RunService"]\n`
		+ `if runService then\n`
		+ `\trunService.Heartbeat = runService.Heartbeat or __makeSignal()\n`
		+ `\trunService.Stepped = runService.Stepped or __makeSignal()\n`
		+ `\trunService.RenderStepped = runService.RenderStepped or __makeSignal()\n`
		+ `end\n`;
}
